<?php

namespace ContainerDTgjpQP;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSonata_Admin_Controller_CrudService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'sonata.admin.controller.crud' shared service.
     *
     * @return \Sonata\AdminBundle\Controller\CRUDController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/vendor/sonata-project/admin-bundle/src/Controller/CRUDController.php';

        $container->services['sonata.admin.controller.crud'] = $instance = new \Sonata\AdminBundle\Controller\CRUDController();

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'controller_resolver' => ['privates', 'debug.controller_resolver', 'getDebug_ControllerResolverService', false],
            'form.factory' => ['privates', 'form.factory', 'getForm_FactoryService', true],
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.authorization_checker' => ['privates', 'security.authorization_checker', 'getSecurity_AuthorizationCheckerService', false],
            'security.csrf.token_manager' => ['privates', 'security.csrf.token_manager', 'getSecurity_Csrf_TokenManagerService', true],
            'security.token_storage' => ['privates', 'security.token_storage', 'getSecurity_TokenStorageService', false],
            'serializer' => ['privates', 'debug.serializer', 'getDebug_SerializerService', true],
            'sonata.admin.admin_exporter' => ['privates', 'sonata.admin.admin_exporter', 'getSonata_Admin_AdminExporterService', true],
            'sonata.admin.audit.manager' => ['privates', 'sonata.admin.audit.manager', 'getSonata_Admin_Audit_ManagerService', true],
            'sonata.admin.object.manipulator.acl.admin' => ['privates', 'sonata.admin.object.manipulator.acl.admin', 'getSonata_Admin_Object_Manipulator_Acl_AdminService', true],
            'sonata.admin.pool' => ['privates', 'sonata.admin.pool', 'getSonata_Admin_PoolService', false],
            'sonata.admin.request.fetcher' => ['privates', 'sonata.admin.request.fetcher', 'getSonata_Admin_Request_FetcherService', true],
            'sonata.exporter.exporter' => ['services', 'sonata.exporter.exporter', 'getSonata_Exporter_ExporterService', true],
            'translator' => ['services', 'translator', 'getTranslatorService', false],
            'twig' => ['privates', 'twig', 'getTwigService', false],
        ], [
            'controller_resolver' => '?',
            'form.factory' => '?',
            'http_kernel' => '?',
            'logger' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.authorization_checker' => '?',
            'security.csrf.token_manager' => '?',
            'security.token_storage' => '?',
            'serializer' => '?',
            'sonata.admin.admin_exporter' => '?',
            'sonata.admin.audit.manager' => '?',
            'sonata.admin.object.manipulator.acl.admin' => '?',
            'sonata.admin.pool' => '?',
            'sonata.admin.request.fetcher' => '?',
            'sonata.exporter.exporter' => '?',
            'translator' => '?',
            'twig' => '?',
        ]))->withContext('sonata.admin.controller.crud', $container));

        return $instance;
    }
}
